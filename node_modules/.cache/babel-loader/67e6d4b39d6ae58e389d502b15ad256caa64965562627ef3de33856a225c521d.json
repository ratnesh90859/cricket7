{"ast":null,"code":"// \"use client\";\n\n// import { cn } from \"../lib/utils\";\n// import { motion, stagger, useAnimate, useInView } from \"framer-motion\";\n// import { useEffect } from \"react\";\n\n// export const TypewriterEffect = ({ words, className, cursorClassName }) => {\n\n//   const wordsArray = words.map((word) => {\n//     return {\n//       ...word,\n//       text: word.text.split(\"\"),\n//     };\n//   });\n\n//   const [scope, animate] = useAnimate();\n//   const isInView = useInView(scope);\n//   useEffect(() => {\n//     if (isInView) {\n//       animate(\n//         \"span\",\n//         {\n//           display: \"inline-block\",\n//           opacity: 1,\n//           width: \"fit-content\",\n//         },\n//         {\n//           duration: 0.3,\n//           delay: stagger(0.1),\n//           ease: \"easeInOut\",\n//         }\n//       );\n//     }\n//   }, [isInView]);\n\n//   const renderWords = () => {\n//     return (\n//       <motion.div ref={scope} className=\"inline\">\n//         {wordsArray.map((word, idx) => {\n//           return (\n//             <div key={`word-${idx}`} className=\"inline-block\">\n//               {word.text.map((char, index) => (\n//                 <motion.span\n//                   initial={{}}\n//                   key={`char-${index}`}\n//                   className={cn(`dark:text-white text-black opacity-0 hidden`, word.className)}\n//                 >\n//                   {char}\n//                 </motion.span>\n//               ))}\n//               {\" \"}{/* This adds a space after each word */}\n//             </div>\n//           );\n//         })}\n//       </motion.div>\n//     );\n//   };\n\n//   return (\n//     <div\n//       className={cn(\n//         \"text-base sm:text-xl md:text-3xl lg:text-5xl font-bold text-center\",\n//         className\n//       )}\n//     >\n//       {renderWords()}\n//       <motion.span\n//         initial={{\n//           opacity: 0,\n//         }}\n//         animate={{\n//           opacity: 1,\n//         }}\n//         transition={{\n//           duration: 0.8,\n//           repeat: Infinity,\n//           repeatType: \"reverse\",\n//         }}\n//         className={cn(\n//           \"inline-block rounded-sm w-[4px] h-4 md:h-6 lg:h-10 bg-blue-500\",\n//           cursorClassName\n//         )}\n//       ></motion.span>\n//     </div>\n//   );\n// };\n\n// export const TypewriterEffectSmooth = ({\n//   words,\n//   className,\n//   cursorClassName,\n// }) => {\n//   // split text inside of words into array of characters\n//   const wordsArray = words.map((word) => {\n//     return {\n//       ...word,\n//       text: word.text.split(\"\"),\n//     };\n//   });\n//   const renderWords = () => {\n//     return (\n//       <div>\n//         {wordsArray.map((word, idx) => {\n//           return (\n//             <div key={`word-${idx}`} className=\"inline-block\">\n//               {word.text.map((char, index) => (\n//                 <span\n//                   key={`char-${index}`}\n//                   className={cn(`dark:text-white text-black `, word.className)}\n//                 >\n//                   {char}\n//                 </span>\n//               ))}\n//             </div>\n//           );\n//         })}\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className={cn(\"flex space-x-1 my-6\", className)}>\n//       <motion.div\n//         className=\"overflow-hidden pb-2\"\n//         initial={{\n//           width: \"0%\",\n//         }}\n//         whileInView={{\n//           width: \"fit-content\",\n//         }}\n//         transition={{\n//           duration: 2,\n//           ease: \"linear\",\n//           delay: 1,\n//         }}\n//       >\n//         <div\n//           className=\"text-xs sm:text-base md:text-xl lg:text:3xl xl:text-5xl font-bold\"\n//           style={{\n//             whiteSpace: \"nowrap\",\n//           }}\n//         >\n//           {renderWords()}{\" \"}\n//         </div>{\" \"}\n//       </motion.div>\n//       <motion.span\n//         initial={{\n//           opacity: 0,\n//         }}\n//         animate={{\n//           opacity: 1,\n//         }}\n//         transition={{\n//           duration: 0.8,\n\n//           repeat: Infinity,\n//           repeatType: \"reverse\",\n//         }}\n//         className={cn(\n//           \"block rounded-sm w-[4px]  h-4 sm:h-6 xl:h-12 bg-blue-500\",\n//           cursorClassName\n//         )}\n//       ></motion.span>\n//     </div>\n//   );\n// };","map":{"version":3,"names":[],"sources":["C:/Users/HP/Downloads/cricket12-main/cricket12-main/src/components/ui/typewriter-effect.js"],"sourcesContent":["// \"use client\";\r\n\r\n// import { cn } from \"../lib/utils\";\r\n// import { motion, stagger, useAnimate, useInView } from \"framer-motion\";\r\n// import { useEffect } from \"react\";\r\n\r\n// export const TypewriterEffect = ({ words, className, cursorClassName }) => {\r\n  \r\n//   const wordsArray = words.map((word) => {\r\n//     return {\r\n//       ...word,\r\n//       text: word.text.split(\"\"),\r\n//     };\r\n//   });\r\n\r\n//   const [scope, animate] = useAnimate();\r\n//   const isInView = useInView(scope);\r\n//   useEffect(() => {\r\n//     if (isInView) {\r\n//       animate(\r\n//         \"span\",\r\n//         {\r\n//           display: \"inline-block\",\r\n//           opacity: 1,\r\n//           width: \"fit-content\",\r\n//         },\r\n//         {\r\n//           duration: 0.3,\r\n//           delay: stagger(0.1),\r\n//           ease: \"easeInOut\",\r\n//         }\r\n//       );\r\n//     }\r\n//   }, [isInView]);\r\n\r\n//   const renderWords = () => {\r\n//     return (\r\n//       <motion.div ref={scope} className=\"inline\">\r\n//         {wordsArray.map((word, idx) => {\r\n//           return (\r\n//             <div key={`word-${idx}`} className=\"inline-block\">\r\n//               {word.text.map((char, index) => (\r\n//                 <motion.span\r\n//                   initial={{}}\r\n//                   key={`char-${index}`}\r\n//                   className={cn(`dark:text-white text-black opacity-0 hidden`, word.className)}\r\n//                 >\r\n//                   {char}\r\n//                 </motion.span>\r\n//               ))}\r\n//               {\" \"}{/* This adds a space after each word */}\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </motion.div>\r\n//     );\r\n//   };\r\n  \r\n//   return (\r\n//     <div\r\n//       className={cn(\r\n//         \"text-base sm:text-xl md:text-3xl lg:text-5xl font-bold text-center\",\r\n//         className\r\n//       )}\r\n//     >\r\n//       {renderWords()}\r\n//       <motion.span\r\n//         initial={{\r\n//           opacity: 0,\r\n//         }}\r\n//         animate={{\r\n//           opacity: 1,\r\n//         }}\r\n//         transition={{\r\n//           duration: 0.8,\r\n//           repeat: Infinity,\r\n//           repeatType: \"reverse\",\r\n//         }}\r\n//         className={cn(\r\n//           \"inline-block rounded-sm w-[4px] h-4 md:h-6 lg:h-10 bg-blue-500\",\r\n//           cursorClassName\r\n//         )}\r\n//       ></motion.span>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export const TypewriterEffectSmooth = ({\r\n//   words,\r\n//   className,\r\n//   cursorClassName,\r\n// }) => {\r\n//   // split text inside of words into array of characters\r\n//   const wordsArray = words.map((word) => {\r\n//     return {\r\n//       ...word,\r\n//       text: word.text.split(\"\"),\r\n//     };\r\n//   });\r\n//   const renderWords = () => {\r\n//     return (\r\n//       <div>\r\n//         {wordsArray.map((word, idx) => {\r\n//           return (\r\n//             <div key={`word-${idx}`} className=\"inline-block\">\r\n//               {word.text.map((char, index) => (\r\n//                 <span\r\n//                   key={`char-${index}`}\r\n//                   className={cn(`dark:text-white text-black `, word.className)}\r\n//                 >\r\n//                   {char}\r\n//                 </span>\r\n//               ))}\r\n//             </div>\r\n//           );\r\n//         })}\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className={cn(\"flex space-x-1 my-6\", className)}>\r\n//       <motion.div\r\n//         className=\"overflow-hidden pb-2\"\r\n//         initial={{\r\n//           width: \"0%\",\r\n//         }}\r\n//         whileInView={{\r\n//           width: \"fit-content\",\r\n//         }}\r\n//         transition={{\r\n//           duration: 2,\r\n//           ease: \"linear\",\r\n//           delay: 1,\r\n//         }}\r\n//       >\r\n//         <div\r\n//           className=\"text-xs sm:text-base md:text-xl lg:text:3xl xl:text-5xl font-bold\"\r\n//           style={{\r\n//             whiteSpace: \"nowrap\",\r\n//           }}\r\n//         >\r\n//           {renderWords()}{\" \"}\r\n//         </div>{\" \"}\r\n//       </motion.div>\r\n//       <motion.span\r\n//         initial={{\r\n//           opacity: 0,\r\n//         }}\r\n//         animate={{\r\n//           opacity: 1,\r\n//         }}\r\n//         transition={{\r\n//           duration: 0.8,\r\n\r\n//           repeat: Infinity,\r\n//           repeatType: \"reverse\",\r\n//         }}\r\n//         className={cn(\r\n//           \"block rounded-sm w-[4px]  h-4 sm:h-6 xl:h-12 bg-blue-500\",\r\n//           cursorClassName\r\n//         )}\r\n//       ></motion.span>\r\n//     </div>\r\n//   );\r\n// };\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}